buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath 'io.github.groovylang.groovydoc:groovydoc-gradle-plugin:1.0.1'
        classpath "io.github.gradle-nexus:publish-plugin:1.1.0"
    }
}
plugins {
    id 'org.asciidoctor.jvm.convert' version '3.2.0'
}

group 'io.github.gpc'

apply plugin: 'org.grails.grails-plugin'
apply plugin: 'org.grails.grails-gsp'
apply plugin: "org.grails.grails-doc"
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: "io.github.gradle-nexus.publish-plugin"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencies {
    provided 'org.springframework.boot:spring-boot-starter-logging'
    provided "org.springframework.boot:spring-boot-starter-actuator"
    provided "org.springframework.boot:spring-boot-autoconfigure"
    provided "org.springframework.boot:spring-boot-starter-tomcat"

    provided "org.grails:grails-web-boot"
	provided "org.grails:grails-dependencies"
	provided "javax.servlet:javax.servlet-api:$servletApiVersion"

    compile "org.grails:scaffolding-core"

    testCompile "org.grails:grails-web-testing-support"
    testCompile "org.grails:grails-gorm-testing-support"

    console "org.grails:grails-console"

    testCompile 'org.javassist:javassist:3.29.0-GA'
    testCompile "org.codehaus.groovy:groovy-dateutil"
    testCompile "cglib:cglib-nodep:2.2.2"
    testCompile("org.jodd:jodd-wot:$joddWotVersion") {
        exclude module: 'slf4j-api'
        exclude module: 'asm'
    }
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = 'jms'
            version = project.version

            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'Jms'
                description = 'JMS integration for Grails'
                url = 'https://github.com/gpc/jms'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'brownj'
                        name = 'Jeff Scott Brown'
                        email = 'brownj@objectcomputing.com'
                    }
                    developer {
                        id = 'sbglasius'
                        name = 'SÃ¸ren Berg Glasius'
                        email = 'soeren+gpc@glasius.dk'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/gpc/jms.git'
                    developerConnection = 'scm:git:https://github.com/gpc/jms.git'
                    url = 'https://github.com/gpc/jms'
                }
            }
        }
    }
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")


afterEvaluate {
    signing {
        if (System.getenv('SIGN_ARMORED_KEY')) {
            String signingKey = System.getenv('SIGN_ARMORED_KEY')
            String signingPassword = System.getenv('SIGN_PASSWORD')
            useInMemoryPgpKeys(signingKey, signingPassword)
        } else {
            ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
            ext["signing.password"] = System.getenv('SIGNING_PASSPHRASE')
            ext["signing.secretKeyRingFile"] = System.getenv('SECRING_FILE')
        }
        required {
            isReleaseVersion
        }

        sign publishing.publications.maven
    }
}

tasks.withType(Sign).configureEach {
    onlyIf { isReleaseVersion }
}

import io.github.gradlenexus.publishplugin.InitializeNexusStagingRepository

tasks.withType(InitializeNexusStagingRepository).configureEach {
    onlyIf { isReleaseVersion }
    shouldRunAfter(tasks.withType(Sign))
}

nexusPublishing {
	repositories {
		sonatype {
			def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
			def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
			def ossStagingProfileId = System.getenv("SONATYPE_STAGING_PROFILE_ID") ?: project.hasProperty("sonatypeOssStagingProfileIdExternalConfig") ? project.sonatypeOssStagingProfileIdExternalConfig : ''

			nexusUrl = uri("https://oss.sonatype.org/service/local/")
			snapshotRepositoryUrl = uri("https://oss.sonatype.org/content/repositories/snapshots/")
			username = ossUser
			password = ossPass
			stagingProfileId = ossStagingProfileId
		}
	}
}

asciidoctor {
    resources {
        from('src/docs/images')
        into "./images"
    }
    sources {
        include 'index.adoc'
    }
    attributes 'experimental': 'true',
            'compat-mode': 'true',
            'toc': 'left',
            'icons': 'font',
            'version': project.version,
            'sourcedir': 'src/main/groovy'
    baseDirFollowsSourceDir()
    outputDir = "${buildDir}/asciidoc"
}

task apiDocs(type: Copy) {
    from groovydoc.outputs.files
    into file("${buildDir}/asciidoc/api")
}

asciidoctor.dependsOn(apiDocs)

task snapshotVersion {
    doLast {
        if (isReleaseVersion) {
            ant.propertyfile(file: "gradle.properties") {
                entry(key: "version", value: "${project.version}-SNAPSHOT")
            }
        }
    }
}
